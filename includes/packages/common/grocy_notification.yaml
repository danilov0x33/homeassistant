# common_grocy_notification_package:
#   homeassistant:
#     customize:
#       automation.common_notify_when_grocy_overdue_products_main:
#         friendly_name: "–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –ø—Ä–æ–¥—É–∫—Ç—ã –∏—Å–ø–æ—Ä—Ç–∏–ª–∏—Å—å"
#       automation.common_notify_when_grocy_expiring_products_main:
#         friendly_name: "–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –ø—Ä–æ–¥—É–∫—Ç—ã —Å–∫–æ—Ä–æ –∏—Å–ø–æ—Ä—Ç—è—Ç—Å—è"
#       automation.common_notify_when_grocy_need_shops_main:
#         friendly_name: "–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –Ω—É–∂–Ω–æ –∫—É–ø–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç—ã"

#   automation:
#     - id: common_notify_when_grocy_overdue_products_main
#       alias: common_notify_when_grocy_overdue_products_main
#       trigger:
#         - platform: time
#           at: "19:00:00"
#       condition:
#         - condition: state
#           entity_id: binary_sensor.grocy_overdue_products
#           state: "on"
#       action:
#         - service: telegram_bot.send_message
#           data_template:
#             target: !secret telegram_danilov_info_group_id
#             message: >-
#               {% set ns = namespace(result=['\U00002757 –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã:']) %}
#               {%- for attr in state_attr('binary_sensor.grocy_overdue_products', 'overdue_products') -%}
#                   {% set ns.result = ns.result + [attr.name  + ' (–û–±—â–µ–µ –∫–æ–ª-–≤–æ: ' + attr.available_amount|int|string + ')'] %}
#               {%- endfor -%}
#               {{ns.result | join('\n')}}

#     - id: common_notify_when_grocy_expiring_products_main
#       alias: common_notify_when_grocy_expiring_products_main
#       trigger:
#         - platform: time
#           at: "19:00:00"
#       condition:
#         - condition: state
#           entity_id: binary_sensor.grocy_expiring_products
#           state: "on"
#       action:
#         - service: telegram_bot.send_message
#           data_template:
#             target: !secret telegram_danilov_info_group_id
#             message: >-
#               {% set ns = namespace(result=['\U00002755 –ò—Å—Ç–µ–∫–∞–µ—Ç —Å—Ä–æ–∫ –≥–æ–¥–Ω–æ—Å—Ç–∏:']) %}
#               {%- for attr in state_attr('binary_sensor.grocy_expiring_products', 'expiring_products') -%}
#                   {% if as_timestamp(attr.best_before_date) > as_timestamp(now().date()) and ((as_timestamp(attr.best_before_date) -  as_timestamp(now().date()))/1000/60) <= 3  %}
#                     {% set ns.result = ns.result + [attr.name  + ' (–ò—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑: ' + ((as_timestamp(attr.best_before_date) -  as_timestamp(now().date()))/1000/60)|int|string + ' –¥–Ω–µ–π; –û–±—â–µ–µ –∫–æ–ª-–≤–æ: ' + attr.available_amount|int|string + ')'] %}
#                   {% endif %}
#               {%- endfor -%}
#               {{ns.result | join('\n')}}

#     - id: common_notify_when_grocy_need_shops_main
#       alias: common_notify_when_grocy_need_shops_main
#       trigger:
#         - platform: time
#           at: "10:00:00"
#       condition: "{{states('sensor.grocy_shopping_list')|int > 0}}"
#       action:
#         - service: telegram_bot.send_message
#           data_template:
#             target: !secret telegram_danilov_info_group_id
#             message: >-
#               {% set ns = namespace(result=['üç¥ –ù—É–∂–Ω–æ –∫—É–ø–∏—Ç—å:']) %}
#               {%- for attr in state_attr('sensor.grocy_shopping_list', 'products') -%}
#                     {% set ns.result = ns.result + [attr.product.name] %}
#               {%- endfor -%}
#               {{ns.result | join('\n')}}
